# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-release:
    # The type of runner that the job will run on
    runs-on: macos-latest
    environment: github
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: build
        env:
          BD_ID: ${{ secrets.BD_ID }}
        run:  bin/build
      - name: version
        run: echo "::set-output name=version::$(date +%Y-%M-%d-%H-%M-%S)"
        id: version
      - name: create-release
        uses: actions/create-release@v1
        id: create-release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version }}
          tag_name: ${{ github.run_id }}.${{github.run_number}}.${{github.run_attempt}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload ARM Installer
        id: upload-arm-installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./.tmp/rwell_bitdefender_arm.pkg
          asset_name: rwell_bitdefender_arm.pkg
          asset_content_type: application/vnd.apple.installer+xml
      - name: Upload ARM Signature
        id: upload-arm-signature
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./.tmp/rwell_bitdefender_arm.sig
          asset_name: rwell_bitdefender_arm.sig
          asset_content_type: text/plain
      - name: Upload Intel Installer
        id: upload-intel-installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./.tmp/rwell_bitdefender_intel.pkg
          asset_name: rwell_bitdefender_intel.pkg
          asset_content_type: application/vnd.apple.installer+xml
      - name: Upload Intel Signature
        id: upload-intel-signature
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./.tmp/rwell_bitdefender_intel.sig
          asset_name: rwell_bitdefender_intel.sig
          asset_content_type: text/plain
      - name: cleanup
        run: rm -rf .tmp/
